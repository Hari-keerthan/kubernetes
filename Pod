--------------------------------------------------------------------------
command to create a pod from a image - kubectl run nginx --image=nginx
command to get the node on which pod is placesd - kubectl get pods -o wide
command to create a dryrun and get a yml from run command - kubectl run redis --image=redis123 --dry-run=client -o yaml >pod.yaml (this will not create pod but give us yaml output for deploying pod)
command with command - kubectl run static-busybox --image=buzybox --commmand sleep 1000 --dry-run=client -o yaml >pod.yaml

command to get all the options available in a pod yaml file - kubectl explain pod --recursive|less

commands to generate yml file  - https://kubernetes.io/docs/reference/kubectl/conventions/

to deploy the pod from yaml (do changes to yaml file and run the command kubectl apply -f pod.yaml)

Example yaml to deploy two containers in a pod


apiVersion: v1
kind: Pod
metadata:
   name: myapp-pod (this is name of pod)
   labels:
      app: myapp
      anykey: anyvalue
      costcenter: US      
spec:
   containers:
      - name: nginx-container (this is name of container in pod)
        image: nginx (this is the image that kubernetes gets from docker hub)
        
      - name: redis-container
        image: redis
      
Add the above line to pod-definition.yaml (cat > pod-definition.yaml and paste the above thing)

and run the command - kubectl create -f pod-definition.yaml - this creates a pod
to see the pods - kubectl get pods
to see the status of a pod - kubectl describe pod <pod name>
to edit a pod- kubectl edit pod redis 



before -

apiVersion: v1
kind: Pod
metadata:
        name: redis
        labels:
           app: my-redis-app
           cost-centre: US
spec:
        containers:
                - name: redis
                  image: redis123

kubectl create -f pod-definition.yaml - now as image name is wrong, pod will have error saying image name wrong

to fix this edit the image name from redis123 to redis , to edit a pod- kubectl edit pod redis (this will open the running conf of a pod, go to the bottom , edit image name from redis123 to redis and save)

to get the logs of a pod command -kubectl logs <podname>
to run a shell command on a pod use command  - kubectl exec --namespace=kube-public curl -- sh -c ' <cmmand>'

yamls with args to a conatiner - 

apiVersion: v1
kind: Pod
metadata:
   name: myapp-pod (this is name of pod)
   labels:
      app: myapp
      anykey: anyvalue
      costcenter: US      
spec:
   containers:
      - name: ubuntu-sleeper
        image: ubuntu
		command: ["sleep"]
		args: ["10"]
		ports:
		   - conatinerPort: 8080
		env:
		   - name: APP_COLOR (name of environmental variable)
		     value: blue (value to be assaigned to env vaiable)
		   - name: APP_CLUSTER
		     value: prod
		
		OR

yamls with args to a conatiner - 

apiVersion: v1
kind: Pod
metadata:
   name: myapp-pod (this is name of pod)
   labels:
      app: myapp
      anykey: anyvalue
      costcenter: US      
spec:
   containers:
      - name: ubuntu-sleeper
        image: ubuntu
		command:
		   - "sleep"
		   - "1200"
		ports:
		   - conatinerPort: 8080
		env:
		   - name: APP_COLOR (name of environmental variable)
		     value: blue (value to be assaigned to env vaiable)
			 
CONFIGMAP

to read the environmental variables from a file we create an configmap

imperative way to create a configmap - kubectl create configmap <config name> --from-literal=<key>=<value>

then run command -  kubectl create configmap app-config --from-literal=APP-COLOR=blue --from-literal=APP-CLUSTER=prod

declarative way - 
 cat >config-map.yaml
apiVersion: v1
kind: configmap
metadata:
   name: app-config
data: 
   APP-COLOR=blue
   APP-CLUSTER=prod   

kubectl create -f config-map.yaml
commad to view config maps - kubectl get configmaps
commad to describe config maps - kubectl describe configmaps

now we need to configure a pod with configmap we created 
example - pod-definition.yaml

apiVersion: v1
kind: Pod
metadata:
   name: myapp-pod (this is name of pod)
   labels:
      app: myapp
      anykey: anyvalue
      costcenter: US      
spec:
   containers:
      - name: webserver
        image: nginx
		command: ["nginx"]
		ports:
		   - conatinerPort: 8080
		envFrom:
		   - configMapRef:
		         name: app-config
				 
kubectl create -f pod-definition.yaml


SECRETS
data stored in a secret is encoded or hashed format
two steps to use secret -
1 -create the secret2 - inject it into pod

imperative way to create a secret 
use command - kubectl create secret generic <secret name> --from-literal=<key>=<value>
create secrect from file - kubectl create secret generic <secret name> --from-file=<path to file>
data in file - 
<key1>=<value1>
<key2>=<value2>
<key3>=<value3>

declarative way - 
example - cat > secret-definition.yaml
apiVersion: v1
kind: Secret
metadata:
   name: myapp-pod (this is name of secret)
   labels:
      app: myapp
      anykey: anyvalue
      costcenter: US      
data:
   <key1>=<value1>
   <key2>=<value2>
   <key3>=<value3>

kubectl create -f secret-definition.yaml
command to view secrets - kubectl get secrets
command to describe secret - kubectl descibe secrets - this shows keys but not values
command to see the values in a secrets - kubectl get secret <secret name> -o yaml

pod-definition file to use secret -

apiVersion: v1
kind: Pod
metadata:
   name: myapp-pod (this is name of pod)
   labels:
      app: myapp
      anykey: anyvalue
      costcenter: US      
spec:
   containers:
      - name: webserver
        image: nginx
		command: ["nginx"]
		ports:
		   - conatinerPort: 8080
		envFrom:
		   - secretRef:
		         name: <secret name>

another way -
        env:
		   - name: <secret name>
		     valueFrom: 
			    secretKeyRef:
				   name: <key>
				   key: <value>

--------------------------------------------------------------------------
